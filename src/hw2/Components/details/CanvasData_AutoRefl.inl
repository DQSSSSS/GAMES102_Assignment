// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<CanvasData> :
    TypeInfoBase<CanvasData>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[11] = "CanvasData";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("points"), &Type::points},
        Field {TSTR("points_poly"), &Type::points_poly},
        Field {TSTR("points_Gauss"), &Type::points_Gauss},
        Field {TSTR("scrolling"), &Type::scrolling, AttrList {
            Attr {TSTR(UMeta::initializer), []()->Ubpa::valf2{ return { 0.f,0.f }; }},
        }},
        Field {TSTR("opt_enable_grid"), &Type::opt_enable_grid, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_context_menu"), &Type::opt_enable_context_menu, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_lines"), &Type::opt_enable_lines, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_polynomial"), &Type::opt_enable_polynomial, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_Gauss"), &Type::opt_enable_Gauss, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("sigma_Gauss"), &Type::sigma_Gauss, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.1f }; }},
        }},
        Field {TSTR("opt_enable_least_squares"), &Type::opt_enable_least_squares, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("n_ls"), &Type::n_ls, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 1 }; }},
        }},
        Field {TSTR("opt_enable_ridge"), &Type::opt_enable_ridge, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("n_ridge"), &Type::n_ridge, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 1 }; }},
        }},
        Field {TSTR("lambda_ridge"), &Type::lambda_ridge, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.1f }; }},
        }},
        Field {TSTR("opt_enable_rbf"), &Type::opt_enable_rbf, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("rbf_epoch"), &Type::rbf_epoch, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 0 }; }},
        }},
        Field {TSTR("rbf_n"), &Type::rbf_n, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 30 }; }},
        }},
        Field {TSTR("rbf_is_training"), &Type::rbf_is_training, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("rbf_loss"), &Type::rbf_loss, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 999 }; }},
        }},
        Field {TSTR("py_get_new_model"), &Type::py_get_new_model},
        Field {TSTR("py_train"), &Type::py_train},
        Field {TSTR("py_test"), &Type::py_test},
        Field {TSTR("is_initialize"), &Type::is_initialize, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("initialize"), &Type::initialize},
        Field {TSTR("pushPoint"), &Type::pushPoint},
    };
};

